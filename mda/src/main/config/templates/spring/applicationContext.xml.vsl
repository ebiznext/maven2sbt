<?xml version="1.0" encoding="$xmlEncoding"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>

    <!-- ========================= GENERAL DEFINITIONS ========================= -->

    <!-- Message source for this context, loaded from localized "messages_xx" files -->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename"><value>messages</value></property>
    </bean>

    <!-- applicationContext merge-point -->
#set ($daoRefsEnabled = !$entities.empty)
#set ($daosEnabled = $daosEnabled && !$entities.empty)
## only generate this stuff if 'daos' has been defined in a namespace
#if ($daosEnabled)
    <!-- Hibernate SessionFactory -->
    <bean id="sessionFactory" class="$sessionFactory">
        <property name="dataSource"><ref bean="dataSource"/></property>
        <property name="mappingResources">
            <list>
#foreach($entity in $entities)
#if ($entity.requiresHibernateMapping)
                <value>${entity.packagePath}/${entity.entityName}.hbm.xml</value>
#end
#end
            </list>
        </property>
        <property name="hibernateProperties"><ref bean="hibernateProperties"/></property>
    </bean>

    <!-- The Hibernate interceptor -->
    <bean id="hibernateInterceptor" class="${hibernateUtils.springHibernatePackage}.HibernateInterceptor">
        <property name="sessionFactory"><ref bean="sessionFactory"/></property>
    </bean>

#foreach($entity in $entities)
    <!-- $entity.name Entity Proxy with inner $entity.name Entity implementation -->
    <bean id="$entity.getBeanName(false)" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target">
            <bean class="$entity.fullyQualifiedDaoImplementationName">
                <property name="sessionFactory"><ref local="sessionFactory"/></property>
## Because of a bug in Spring with circular references (and using AOP proxies),
## we need to use the lookup-method as a work-a-round for dependencies
## which represent circular references
#foreach($entityRef in $entity.entityReferences)
#if (!$entityRef.circularReference)
                <property name="$entityRef.daoName"><ref bean="$entityRef.targetElement.getBeanName(false)"/></property>
#end
#end
#foreach($entityRef in $entity.entityReferences)
#if ($entityRef.circularReference)
                <lookup-method name="$entityRef.daoGetterName" bean="$entityRef.targetElement.getBeanName(false)"/>
#end
#end
## also initialize daos of parent dao
#if($daoInheritanceEnabled && $entity.generalization)
#foreach($entityRef in $entity.generalization.entityReferences)
#if (!$entityRef.circularReference)
                <property name="$entityRef.daoName"><ref bean="$entityRef.targetElement.getBeanName(false)"/></property>
#end
#end
#foreach($entityRef in $entity.generalization.entityReferences)
#if ($entityRef.circularReference)
                <lookup-method name="$entityRef.daoGetterName" bean="$entityRef.targetElement.getBeanName(false)"/>
#end
#end
#end
            </bean>
        </property>
        <property name="proxyInterfaces">
            <value>$entity.fullyQualifiedDaoName</value>
        </property>
        <property name="interceptorNames">
            <list>
                <value>hibernateInterceptor</value>
            </list>
        </property>
    </bean>

#end
#end
    <!-- ========================= Start of SERVICE DEFINITIONS ========================= -->

    <!-- Service Transactional Interceptor
    <bean id="serviceTransactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager"><ref bean="transactionManager"/></property>
        <property name="transactionAttributeSource">
            <value>
#foreach ($service in $services)
#foreach ($operation in $springUtils.filterUniqueByName($service.implementationOperations))
                ${service.fullyQualifiedName}.${operation.name}=${operation.transactionType}
#end
#set ($superClass = $service.superClass)
#if ($superClass && "$superClass" != '')
#foreach ($operation in $springUtils.filterUniqueByName($superClass.implementationOperations))
#if (!$operation.abstract)
                ${service.fullyQualifiedName}.${operation.name}=${operation.transactionType}
#end
#end
#end
#set ($superClass = '')
#end
            </value>
        </property>
    </bean> -->

#foreach($service in $services)
    <!-- $service.name Service Proxy with inner $service.name Service Implementation -->
    <bean id="$service.getBeanName(false)" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target">
            <bean class="$service.fullyQualifiedImplementationName">
#foreach($entityRef in $service.entityReferences)
                <property name="$entityRef.daoName"><ref bean="$entityRef.targetElement.getBeanName(false)"/></property>
#end
#if($service.generalization)
#foreach($entityRef in $service.generalization.entityReferences)
                <property name="$entityRef.daoName"><ref bean="$entityRef.targetElement.getBeanName(false)"/></property>
#end
#end
## Because of a bug in Spring with circular references (and using AOP proxies),
## we need to use the lookup-method as a work-a-round for dependencies
## which represent circular references
#foreach($serviceRef in $service.allServiceReferences)
#if (!$serviceRef.circularReference)
                <property name="$serviceRef.name"><ref bean="$serviceRef.targetElement.beanName"/></property>
#end
#end
            </bean>
        </property>
        <property name="proxyInterfaces">
            <value>$service.fullyQualifiedName</value>
        </property>
        <property name="interceptorNames">
            <list>
#if ($acegiServiceSecurity)
                <value>serviceSecurityInterceptor</value>
#end
#if ($enableSpringTransactions)
                <value>serviceTransactionInterceptor</value>
#end
#if ($daosEnabled && $service.hibernateInterceptorEnabled)
                <value>hibernateInterceptor</value>
#end
#foreach($interceptor in $service.interceptors)
                <value>$interceptor</value>
#end
            </list>
        </property>
    </bean>

#end
    <!-- ========================= End of SERVICE DEFINITIONS ========================= -->
##                ${service.fullyQualifiedName}.${operation.name}=#foreach($role in $operation.roles)#if($acegiRolePrefix && !$role.name.startsWith("$acegiRolePrefix"))$acegiRolePrefix#end$role.name#if($velocityCount != $operation.roles.size()), #end#end
#if ($acegiServiceSecurity)
    <!-- ================= Start of ACEGI SERVICE SECURITY DEFINITIONS ================ -->
    <bean id="serviceSecurityInterceptor" class="$acegiServiceSecurityInterceptor">
        <property name="accessDecisionManager"><ref bean="serviceAccessDecisionManager"/></property>
#if ($stringUtils.isNotBlank($acegiAuthenticationManager))
        <property name="authenticationManager"><ref bean="$acegiAuthenticationManager"/></property>
#end
#if ($stringUtils.isNotBlank($acegiRunAsManager))
        <property name="runAsManager"><ref bean="$acegiRunAsManager"/></property>
#end
        <property name="objectDefinitionSource">
            <value>
#foreach($service in $services)
#foreach ($operation in $service.operations)
#if (!$operation.roles.empty)
                ${service.fullyQualifiedName}.${operation.name}=#foreach($role in $operation.roles)$acegiRolePrefix$role.name,#end ROLE_RITMx_DUMMY
#end
#end
#set ($superClass = $service.superClass)
#if ($superClass && "$superClass" != '')
#foreach ($operation in $springUtils.filterUniqueByName($superClass.implementationOperations))
#if (!$operation.abstract)
#if (!$operation.roles.empty)
                ${service.fullyQualifiedName}.${operation.name}=#foreach($role in $operation.roles)$acegiRolePrefix$role.name,#end ROLE_RITMx_DUMMY
#end
#end
#end
#end
#set ($superClass = '')
#end
            </value>
        </property>
    </bean>

    <bean id="serviceAccessDecisionManager" class="$acegiServiceAccessDecisionManager">
        <property name="allowIfAllAbstainDecisions">
            <value>false</value>
        </property>
        <property name="decisionVoters">
            <list>
                <ref local="serviceDecisionVoter"/>
            </list>
        </property>
    </bean>

    <bean id="serviceDecisionVoter" class="$acegiServiceDecisionVoter">
        <property name="rolePrefix"><value>$acegiRolePrefix</value></property>
    </bean>

    <!-- ================== End of ACEGI SERVICE SECURITY DEFINITIONS ================= -->
#end
</beans>
