// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: Enumeration.vsl in andromda-java-cartridge.
//
## -- start -- set the map and list types as template parameters if required
#set ($valuesTemplateType = "")
#set ($literalsTemplateType = "")
#set ($namesTemplateType = "")
#if($enableTemplating)
#if($enumeration.literalType.primitive)
#set ($valuesTemplateType = "<${enumeration.literalType.wrapperName}, ${enumeration.name}>")
#set ($literalsTemplateType = "<${enumeration.literalType.wrapperName}>")
#else
#set ($valuesTemplateType = "<${enumeration.literalType.fullyQualifiedName}, ${enumeration.name}>")
#set ($literalsTemplateType = "<${enumeration.literalType.fullyQualifiedName}>")
#end
#set ($namesTemplateType = "<java.lang.String>")
#end
##  -- end --
#if ($stringUtils.isNotBlank($enumeration.packageName))
package $enumeration.packageName;
#end

import javax.ws.rs.WebApplicationException;
import org.codehaus.jackson.map.ObjectMapper;
import javax.xml.bind.annotation.XmlRootElement;

/**
$enumeration.getDocumentation(" * ")
 */
@XmlRootElement(name = "${enumeration.name}")
public class $enumeration.name
#if($enumeration.generalization)
    extends ${enumeration.generalization.fullyQualifiedName}
#elseif ($serializable)
    implements java.io.Serializable
#end
{
#if ($serializable)
    /**
     * The serial version UID of this class. Needed for serialization.
     */
#if ($enumeration.name.equals("MeanOfPayment"))
    private static final long serialVersionUID = 1814321236197566583L;
#elseif ($enumeration.name.equals("TypeCommandeCalypso"))
    private static final long serialVersionUID = 0x36d61248d22f9c87L;
#else
    private static final long serialVersionUID = ${enumeration.serialVersionUID}L;
#end

#end
#foreach ($literal in $enumeration.literals)
    /**
$literal.getDocumentation("     * ")
     */
    public static final $enumeration.name $literal.name = new ${enumeration.name}($literal.enumerationValue);

#end
    private $enumeration.literalType.fullyQualifiedName value;

    private ${enumeration.name}($enumeration.literalType.fullyQualifiedName value)
    {
        this.value = value;
    }

    /**
     * The default constructor allowing
     * super classes to access it.
     */
    public ${enumeration.name}()
    {
    }

    /**
     * @see java.lang.Object#toString()
     */
    public String toString()
    {
        return java.lang.String.valueOf(value);
    }

    /**
     * Creates an instance of $enumeration.name from <code>value</code>.
     *
     * @param value the value to create the $enumeration.name from.
     */
    public static $enumeration.name $enumeration.fromOperationSignature
    {
#set ($value = "value")
#if($enumeration.literalType.primitive)
#set ($value = "new ${enumeration.literalType.wrapperName}(value)")
#end
        final $enumeration.name typeValue =#if(!$enableTemplating) (${enumeration.name})#end values.get($value);
        if (typeValue == null)
        {
            throw new IllegalArgumentException("invalid value '" + value + "', possible values are: " + literals);
        }
        return typeValue;
    }

    /**
     * Gets/Sets the underlying value of this type safe enumeration.
     *
     * @return the underlying value.
     */
    public $enumeration.literalType.fullyQualifiedName getValue()
    {
        return this.value;
    }
    /**
     * Gets/Sets the underlying value of this type safe enumeration.
     *
     */
    public void setValue($enumeration.literalType.fullyQualifiedName value)
    {
        this.value = value;
    }

    /**
     * @see java.lang.Comparable#compareTo(Object)
     */
    public int compareTo(Object that)
    {
#if($enumeration.literalType.primitive)
        return this.getValue() < (($enumeration.name)that).getValue() ? -1 :
            (this.getValue() == (($enumeration.name)that).getValue() ? 0 : 1);
#else
        return (this == that) ? 0 : this.getValue().compareTo((($enumeration.name)that).getValue());
#end
    }

    /**
     * Returns an unmodifiable list containing the literals that are known by this enumeration.
     *
     * @return A List containing the actual literals defined by this enumeration, this list
     *         can not be modified.
     */
    public static java.util.List${literalsTemplateType} literals()
    {
        return literals;
    }

    /**
     * Returns an unmodifiable list containing the names of the literals that are known
     * by this enumeration.
     *
     * @return A List containing the actual names of the literals defined by this
     *         enumeration, this list can not be modified.
     */
    public static java.util.List${namesTemplateType} names()
    {
        return names;
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
#if ($enumeration.literalType.primitive)
        return (this == object)
            || (object instanceof $enumeration.name
            && (($enumeration.name)object).getValue() == this.getValue());
#else
        return (this == object)
            || (object != null && object instanceof $enumeration.name && (($enumeration.name)object).getValue().equals(
                this.getValue()));
#end
    }

    /**
     * @see java.lang.Object#hashCode()
     */
    public int hashCode()
    {
#if ($enumeration.literalType.primitive)
        return this.getValue();
#else
        return this.getValue().hashCode();
#end
    }

    /**
     * This method allows the deserialization of an instance of this enumeration type to return the actual instance
     * that will be the singleton for the JVM in which the current thread is running.
     * <p/>
     * Doing this will allow users to safely use the equality operator <code>==</code> for enumerations because
     * a regular deserialized object is always a newly constructed instance and will therefore never be
     * an existing reference; it is this <code>readResolve()</code> method which will intercept the deserialization
     * process in order to return the proper singleton reference.
     * <p/>
     * This method is documented here:
     * <a href="http://java.sun.com/j2se/1.3/docs/guide/serialization/spec/input.doc6.html">Java
     * Object Serialization Specification</a>
     */
    private java.lang.Object readResolve() throws java.io.ObjectStreamException
    {
        return ${enumeration.name}.${enumeration.fromOperationName}(this.value);
    }

    private static final java.util.Map${valuesTemplateType} values = new java.util.HashMap${valuesTemplateType}($enumeration.literals.size(), 1);
    private static java.util.List${literalsTemplateType} literals = new java.util.ArrayList${literalsTemplateType}($enumeration.literals.size());
    private static java.util.List${namesTemplateType} names = new java.util.ArrayList${namesTemplateType}($enumeration.literals.size());

    /**
     * Initializes the values.
     */
    static
    {
#foreach ($literal in $enumeration.literals)
#set ($value = "${literal.name}.value")
#if($literal.type.primitive)
#set ($value = "new ${literal.type.wrapperName}(${literal.name}.value)")
#end
        values.put($value, $literal.name);
        literals.add($value);
        names.add("$literal.name");
#end
        literals = java.util.Collections.unmodifiableList(literals);
        names = java.util.Collections.unmodifiableList(names);
    }

    public static $enumeration.name valueOf(String jsonRepresentation) {
            ObjectMapper mapper = new ObjectMapper();
            $enumeration.name o= null;
            try {
                    o = mapper.readValue(jsonRepresentation, ${enumeration.name}.class );
            } catch (java.io.IOException e) {
                e.printStackTrace();
                     throw new WebApplicationException();
            }
            return o;
    }

}